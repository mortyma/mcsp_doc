library(ggplot2)


#lookup table for human readable description of column names
desc <- c(
test="test",
algorithm="algorithm",
scheduler="scheduler",
nodes="#nodes",
edges="#edges",
paths="#paths",
cpus="Number of threads",
total_time="Execution time [s]",
num_dead_tasks="#dead tasks",
num_actual_tasks="#created tasks",
variant="Scheduler variant"
)

#read benchmark data from files
readDataFrom <- function(...) {
	files <- c(...)
	d <- NULL
	
	for (f in files) {
		tmp <- read.table(f, header=TRUE, sep=",")
		d <- rbind(d, tmp)
	}
	d
}

# generic function to plot benchmark data
plotBenchmark <- function(..., xAxis, yAxis, legendPos="topright", log="", aggFun=min) {
    d <- readDataFrom(...)
    
    # aggregate over all runs
    ad <- aggregate(d[[yAxis]], 
                    list(
                        test = d$test, 
                        algorithm = d$algorithm, 
                        scheduler = d$scheduler, 
                        variant = d$variant, 
                        xAxis = d[[xAxis]]), 
                    aggFun)       
        
    # generate the plot
    p <- ggplot(data=ad, aes(xAxis, x, color=variant, shape=variant)) + geom_line() + geom_point() + theme(legend.position="top", legend.direction="horizontal") + scale_fill_discrete("")
    # axis labels
    p <- p + xlab(desc[xAxis]) + ylab(desc[yAxis])
   
    p
}

plotOverCpus <- function(..., yAxis, legendPos="topright", log="", from=1, to=80, aggFun=min) 
{
    d <- readDataFrom(...)
    xAxis="cpus"
    
    # aggregate over all runs
    ad <- aggregate(d[[yAxis]], 
                    list(
                        test = d$test, 
                        algorithm = d$algorithm, 
                        scheduler = d$scheduler, 
                        variant = d$variant, 
                        xAxis = d[[xAxis]]), 
                    aggFun)       
    
    # only use data sets where #cpus >= from and <= to
    fd <- subset(ad, ad$xAxis >= from & ad$xAxis <= to)
    
    # generate the plot
    p <- ggplot(data=fd, aes(xAxis, x, color=variant, shape=variant)) + geom_line() + geom_point() + theme(legend.position="top", legend.direction="horizontal") +  scale_fill_discrete("")
    # axis labels
    p <- p + xlab(desc[xAxis]) + ylab(desc[yAxis])
   
    p
}

plotPerformanceVariance <- function(file, from=1, to=80) {
    d <- readDataFrom(file)
    
    # only use data sets where #cpus >= from and <= to
    fd <- subset(d, d$cpus >= from & d$cpus <= to)

    # create the plot
    p <- ggplot(fd, aes(factor(cpus), total_time)) + xlab(desc["cpus"]) + ylab(desc["total_time"])
    p + geom_boxplot()
} 